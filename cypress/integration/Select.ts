describe("Select Components", () => {
  beforeEach(() => {
    cy.visit("/#!/Select")
  })
  it("should be visible in the DOM", () => {
    cy.get('[data-cy="basic-select"]')
  })
  it("should be expandable via keyboard", () => {
    Cypress.on("uncaught:exception", () => {
      return false
    })
    cy.tab()
      .tab()
      .tab()
      .tab()
      .type("{enter}")
      .tab()
      .tab({ shift: true })
      .type("{downarrow}")
      .tab()
      .tab({ shift: true })
      .type("{uparrow}")
      .tab()
      .tab({ shift: true })
  })
  it("should not lose focus when choosing something", () => {
    cy.get('[data-cy="basic-select"]')
      .type("{enter}")
      .focused()
      .type("{downarrow}{downarrow}{downarrow}{downarrow}{downarrow}{uparrow}{enter}")

    cy.get('[data-cy="basic-select"]')
      .type("{downarrow}")
      .contains("Option 8")
      .type("{enter}")
    cy.get('[data-cy="basic-select"] input[value="Option 8"]')
  })
  it("should be selectable via keyboard up/down", () => {
    cy.get('[data-cy="basic-select"]')
      .type("{downarrow}")
      .focused()
      .type("{downarrow}{downarrow}{downarrow}{downarrow}{uparrow}{enter}")
    cy.get('[data-cy="basic-select"] input[value="Option 5"]')
  })
  it("should be selectable via keyboard home", () => {
    cy.get('[data-cy="basic-select"]')
      .type("{enter}")
      .focused()
      .type("{enter}{home}{enter}")
    cy.get('[data-cy="basic-select"] input[value="Option 1"]')
  })
  it("should be selectable via keyboard end", () => {
    cy.get('[data-cy="basic-select"]')
      .type("{enter}")
      .focused()
      .type("{enter}{end}{enter}")
    cy.get('[data-cy="basic-select"] input[value="Option 8"]')
  })
  it("should be labelled correctly", () => {
    cy.get('[data-cy="basic-select"]').contains("Basic")
  })
  it("should display values from the options if no labels were provided", () => {
    cy.get('[data-cy="basic-select-no-labels"] input[value="one"]')
      .type("{downarrow}")
      .focused()
      .type("{downarrow}")
      .contains("two")
      .type("enter")
    cy.get('[data-cy="basic-select-no-labels"] input[value="two"]')
  })
  it("should allow multi-select", () => {
    cy.get('[data-cy="multi-select"]')
      .type("{enter}")
      .type("{downarrow}{downarrow}{enter}")
      .type("{enter}")
      .type("{downarrow}{downarrow}{downarrow}{enter}")
      .type("{enter}")
      .type("{downarrow}{downarrow}{downarrow}{downarrow}{enter}")
      .type("{esc}{enter}")
    cy.get('[data-cy="multi-select"] input[value="Option 1, Option 3, Option 6"]').type("{esc}")
  })
  it("should filter content", () => {
    cy.visit("/#!/Select/5").wait(1000)
    cy.tab()
      .tab()
      .tab()
      .type("{enter}")
      .focused()
      .type("8{downarrow}{enter}")
    cy.get('[data-cy="filterable-select"] input[value="Option 8"]')
  })
  it("should truncate max options", () => {
    cy.visit("/#!/Select/7").wait(1000)
    cy.tab()
      .tab()
      .tab()
      .type("{enter}")
      .focused()
      .type("{downarrow}")
    cy.get('[data-cy="maxOptions-select"] input[value="Option 1"]')
    cy.get('[data-cy="maxOptions-select"]')
      .type("{enter}{downarrow}")
      .focused()
      .type("{downarrow}{downarrow}{downarrow}{enter}")
    cy.get('[data-cy="maxOptions-select"] input[value="Option 2"]')
    cy.get('[data-cy="maxOptions-select"]')
      .type("{enter}")
      .focused()
      .type("{downarrow}{downarrow}{downarrow}{downarrow}{enter}")
    cy.get('[data-cy="maxOptions-select"] input[value="Option 3"]').should("not.exist")
    cy.visit("/#!/Select/7").wait(1000)
    cy.get("body")
      .tab()
      .tab()
      .tab()
      .type("{enter}")
      .focused()
      .type("8{uparrow}{enter}")
    cy.get('[data-cy="maxOptions-select"] input[value="Option 8"]')
  })
  it("should support a custom option", () => {
    cy.visit("/#!/Select/13").wait(1000)
    cy.tab()
      .tab()
      .tab()
      .type("{downarrow}")
      .focused()
      .type("{downarrow}{end} ")
    cy.focused()
      .type("{enter}")
      .focused()
      .type("hola amigo como estas")
    cy.get("body")
      .tab()
      .tab()
      .tab()
      .type("{enter}")
      .focused()
      .type("{downarrow}{enter}")
    cy.get("body")
      .tab()
      .tab()
      .tab()
      .type("{enter}")
      .focused()
      .type("{downarrow}{end}{enter}")
    cy.get('[data-cy="custom-select"] input[value="chickenshola amigo como estas"]')
  })
  it("should not be accessible when disabled", () => {
    cy.visit("/#!/Select/11").wait(1000)
    cy.tab()
      .tab()
      .tab()
      .contains("View Code") // tab past it

    cy.get('[data-cy="disabled-select"] [role="option"]').should("not.exist")
  })
  it("should allow only one open at a time", () => {
    cy.get('[data-cy="basic-select"]')
      .type("{downarrow}")
      .tab()
      .contains("Option 4")
      .should("not.exist")
  })
})
