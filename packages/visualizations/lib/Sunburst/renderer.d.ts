import DataHandler from "./data_handler";
import { IEvents, IObject, IState, TD3Selection, TDatum, TStateWriter } from "./typings";
import "d3-transition";
declare class Renderer {
    angleScale: any;
    arc: any;
    currentTranslation: [number, number];
    data: TDatum[];
    dataHandler: DataHandler;
    el: TD3Selection;
    events: IEvents;
    mouseOverDatum: TDatum;
    previous: TDatum[];
    radiusScale: any;
    radius: number;
    state: IState;
    stateWriter: TStateWriter;
    topNode: TDatum;
    total: number;
    zoomNode: TDatum;
    constructor(state: IState, stateWriter: TStateWriter, events: IEvents, el: TD3Selection);
    draw(): void;
    exit(arcs: TD3Selection, duration: number, disableAnimations: boolean): void;
    arcClass(d: TDatum): string;
    enterAndUpdate(arcs: TD3Selection, duration: number, disableAnimations: boolean): void;
    compute(): void;
    endAngle(d: TDatum): number;
    translate(): string;
    translateBack(point: [number, number]): [number, number];
    isEqual(d1: TDatum): (d2: TDatum) => boolean;
    isSibling(d1: TDatum): (d2: TDatum) => boolean;
    findSiblings(data: TDatum[], d: TDatum): TDatum[];
    findAncestor(data: TDatum[], d: TDatum): TDatum;
    findDatum(data: TDatum[], d: TDatum): TDatum;
    arcTween(d: TDatum): (t: number) => string;
    removeArcTween(d: TDatum): (t: number) => string;
    onClick(payload: IObject): void;
    zoomOut(payload: IObject): void;
    onMouseOver(d: TDatum, el: Element): void;
    highlightPath(d: TDatum, el: Element): void;
    onMouseLeave(d: TDatum, el: Element): any;
    removeTruncationArrows(): void;
    arrowTransformation(d: TDatum): string;
    updateTruncationArrows(): void;
}
export default Renderer;
