import DataHandler from "./data_handler";
import { ClickPayload, D3Selection, Datum, EventBus, State, StateWriter } from "./typings";
import "d3-transition";
declare class Renderer {
    angleScale: any;
    arc: any;
    currentTranslation: [number, number];
    data: Datum[];
    dataHandler: DataHandler;
    el: D3Selection;
    events: EventBus;
    mouseOverDatum: Datum;
    previous: Datum[];
    radiusScale: any;
    radius: number;
    state: State;
    stateWriter: StateWriter;
    topNode: Datum;
    total: number;
    zoomNode: Datum;
    constructor(state: State, stateWriter: StateWriter, events: EventBus, el: D3Selection);
    draw(): void;
    exit(arcs: D3Selection, duration: number, disableAnimations: boolean): void;
    arcClass(d: Datum): string;
    enterAndUpdate(arcs: D3Selection, duration: number, disableAnimations: boolean): void;
    compute(): void;
    endAngle(d: Datum): number;
    translate(): string;
    translateBack(point: [number, number]): [number, number];
    isEqual(d1: Datum): (d2: Datum) => boolean;
    isSibling(d1: Datum): (d2: Datum) => boolean;
    findSiblings(data: Datum[], d: Datum): Datum[];
    findAncestor(data: Datum[], d: Datum): Datum;
    findDatum(data: Datum[], d: Datum): Datum;
    arcTween(d: Datum): (t: number) => string;
    removeArcTween(d: Datum): (t: number) => string;
    onClick(payload: ClickPayload): void;
    zoomOut(payload: ClickPayload): void;
    onMouseOver(d: Datum, el: Element): void;
    highlightPath(d: Datum, el: Element): void;
    onMouseLeave(d: Datum, el: Element): any;
    removeTruncationArrows(): void;
    arrowTransformation(d: Datum): string;
    updateTruncationArrows(): void;
}
export default Renderer;
