import PieChartCanvas from "./canvas";
import Series from "./series";
import StateHandler from "../utils/state_handler";
import EventEmitter from "../utils/event_bus";
import { Accessors, AccessorsObject, Components, Computed, Data, Facade, PieChartConfig } from "./typings";
declare class PieChartFacade implements Facade {
    __disposed: boolean;
    canvas: PieChartCanvas;
    components: Components;
    context: Element;
    events: EventEmitter;
    series: Series;
    state: StateHandler<PieChartConfig, Data>;
    constructor(context: Element);
    insertState(): StateHandler<PieChartConfig, Data>;
    initialConfig(): PieChartConfig;
    initialAccessors(): AccessorsObject;
    initialComputed(): Computed;
    insertCanvas(): PieChartCanvas;
    insertComponents(): Components;
    insertSeries(): Series;
    data(data?: Data): Data;
    config(config?: Partial<PieChartConfig>): PieChartConfig;
    accessors(type: string, accessors: Accessors<any>): Accessors<any>;
    on(event: string, handler: any): void;
    off(event: string, handler: any): void;
    draw(): Element;
    close(): void;
}
export default PieChartFacade;
