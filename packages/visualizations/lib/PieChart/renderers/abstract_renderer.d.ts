import "d3-transition";
import { ComputedArcs, ComputedData, ComputedDatum, ComputedInitial, D3Selection, Datum, EventBus, HoverPayload, LegendDatum, Object, Partial, RendererAccessors, State } from "../typings";
declare abstract class AbstractRenderer {
    color: (d: Datum | ComputedDatum) => string;
    computed: ComputedData;
    currentTranslation: [number, number];
    data: Datum[];
    drawn: boolean;
    el: D3Selection;
    events: EventBus;
    key: (d: Datum | ComputedDatum) => string;
    previous: Partial<ComputedData>;
    state: State;
    total: number;
    type: string;
    value: (d: Datum | ComputedDatum) => number;
    constructor(state: State, events: EventBus, el: D3Selection, options: Object<any>);
    assignOptions(options: Object<any>): void;
    assignAccessors(customAccessors: Partial<RendererAccessors>): void;
    defaultAccessors(): RendererAccessors;
    setData(data: Datum[]): void;
    computeTotal(): void;
    hasData(): boolean;
    draw(): void;
    initialDraw(): void;
    updateDraw(): void;
    exit(arcs: D3Selection): void;
    enterAndUpdate(arcs: D3Selection): void;
    onTransitionEnd(): void;
    abstract centerDisplayString(): string[];
    updateTotal(): void;
    abstract totalYOffset(): string;
    updateElementHover(datapoint: HoverPayload): void;
    onMouseOver(d: ComputedDatum): void;
    highlightElement(key: string): void;
    abstract angleRange(): [number, number];
    abstract totalForPercentages(): number;
    checkData(): void;
    angleValue(d: Datum): number;
    compute(): void;
    calculatePercentages(total: number): void;
    computeArcs(computed: ComputedInitial, scale?: number): ComputedArcs;
    computeOuter(width: number, height: number, scaleFactor?: number): number;
    computeInner(outerRadius: any): number;
    hoverOuter(radius: number): number;
    abstract computeTranslate(): [number, number];
    translateBack(point: [number, number]): [number, number];
    abstract arcTween(d: ComputedDatum, i: number): (t: number) => string;
    removeArcTween(d: ComputedDatum, i: number): (t: number) => string;
    labelTranslate(d: Datum): string;
    translateString(values: [number, number]): string;
    dataForLegend(): LegendDatum[];
    remove(): void;
}
export default AbstractRenderer;
