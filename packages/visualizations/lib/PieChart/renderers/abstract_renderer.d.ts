import { IEvents, IObject, IState, TD3Selection, TDatum } from "../typings";
import "d3-transition";
declare abstract class AbstractRenderer {
    color: (d: TDatum) => string;
    computed: IObject;
    currentTranslation: [number, number];
    data: TDatum[];
    drawn: boolean;
    el: TD3Selection;
    events: IEvents;
    key: (d: TDatum) => string;
    previous: IObject;
    state: IState;
    total: number;
    type: string;
    value: (d: TDatum) => number;
    constructor(state: IState, events: IEvents, el: TD3Selection, options: IObject);
    setData(data: TDatum[]): void;
    computeTotal(): void;
    hasData(): boolean;
    draw(): void;
    initialDraw(): void;
    updateDraw(): void;
    onTransitionEnd(): void;
    abstract centerDisplayString(): string[];
    updateTotal(): void;
    abstract totalYOffset(): string;
    updateElementHover(datapoint: IObject): void;
    onMouseOver(d: TDatum): void;
    abstract angleRange(): [number, number];
    abstract totalForPercentages(): number;
    checkData(): void;
    angleValue(d: TDatum): number;
    compute(): void;
    calculatePercentages(total: number): void;
    computeArcs(scale?: number): void;
    computeOuter(width: number, height: number, scaleFactor?: number): number;
    computeInner(outerRadius: any): number;
    hoverOuter(radius: number): number;
    abstract computeTranslate(): [number, number];
    translateBack(point: [number, number]): [number, number];
    abstract arcTween(d: TDatum, i: number): (t: number) => string;
    removeArcTween(d: TDatum, i: number): (t: number) => string;
    labelTranslate(d: TDatum): string;
    translateString(values: [number, number]): string;
    dataForLegend(): IObject[];
    remove(): void;
}
export default AbstractRenderer;
