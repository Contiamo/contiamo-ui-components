import "d3-transition";
import { ComputedData, D3Selection, Datum, EventBus, LegendDatum, Object, Partial, Renderer, RendererAccessor, State } from "../typings";
declare class Polar implements Renderer {
    color: RendererAccessor<string>;
    computed: ComputedData;
    currentTranslation: [number, number];
    data: Datum[];
    drawn: boolean;
    el: D3Selection;
    events: EventBus;
    key: RendererAccessor<string>;
    minSegmentWidth: number;
    previous: Partial<ComputedData>;
    state: State;
    type: "donut" | "polar" | "gauge";
    value: RendererAccessor<number>;
    constructor(state: State, events: EventBus, el: D3Selection, options: Object<any>);
    updateOptions(options: Object<any>): void;
    setData(data: Datum[]): void;
    draw(): void;
    private initialDraw();
    private updateDraw();
    private arcAttributes();
    private fitToCanvas();
    private arcTween(d, i);
    private removeArcTween(d, i);
    private centerDisplayString();
    private compute();
    private angleValue();
    private computeArcs(computed);
    private computeOuter(drawingDims, scaleFactor?);
    private computeInner(data, outerRadius);
    private hoverOuter(radius);
    private onMouseOver(d);
    private updateElementHover(datapoint);
    private highlightElement(key);
    private onMouseOut();
    dataForLegend(): LegendDatum[];
    remove(): void;
}
export default Polar;
