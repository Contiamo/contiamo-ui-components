import Renderer from "./renderer";
import { AxisPosition, D3Selection, Datum, EventBus, LegendDatum, Object, RendererOptions, State, StateWriter } from "../typings";
declare class ChartSeries {
    el: D3Selection;
    events: EventBus;
    oldRenderers: Renderer[];
    options: Object<any>;
    renderers: Renderer[];
    state: any;
    stateWriter: StateWriter;
    data: () => Datum[] | Object<any>[];
    hide: () => boolean;
    hideInLegend: () => boolean;
    key: () => string;
    legendColor: () => string;
    legendName: () => string;
    renderAs: () => RendererOptions<any>[];
    symbolOffset: (d: Datum) => number;
    unit: () => string;
    axis: () => AxisPosition;
    xAxis: () => "x1" | "x2";
    yAxis: () => "y1" | "y2";
    constructor(state: State, stateWriter: StateWriter, events: EventBus, el: D3Selection, options: Object<any>);
    update(options: Object<any>): void;
    assignAccessors(): void;
    private updateRenderers();
    private removeAllExcept(types);
    private get(type);
    private addRenderer(options);
    private remove(renderer);
    dataForLegend(): LegendDatum;
    dataForAxis(axis: "x" | "y"): any[];
    legendPosition(): "top" | "bottom";
    legendFloat(): "left" | "right";
    getBarsInfo(): Object<any>;
    hasFlags(): boolean;
    draw(): void;
    private close();
}
export default ChartSeries;
